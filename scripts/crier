#!/usr/bin/env python

from __future__ import print_function
from argparse import RawTextHelpFormatter
from flask import Flask, request
from flask_restful import Resource, Api
from multiprocessing import Process
import argparse
import json
import requests
import signal
import sys

from crier.script import Script, SCHEMA
from crier.script_master import ScriptMaster


def parse_arguments():
    description = """
A simple webserver that reports everything it hears.

jsonschema for --scripts option:
""" + SCHEMA
    parser = argparse.ArgumentParser(description=description,
            formatter_class=RawTextHelpFormatter)
    parser.add_argument('--port', type=int)
    parser.add_argument('--scripts', type=str,
            default='[{"status_code": 200, "repeat": -1}]',
            help='A JSON formatted list of scripts. See jsonschema above. (default: %(default)s)')
    parser.add_argument('--timeout', type=int)

    arguments = parser.parse_args()

    return arguments


# This isn't great, but it's the best we can do with Flask:
# http://stackoverflow.com/questions/2838244/get-open-tcp-port-in-python
# http://stackoverflow.com/questions/5085656/how-to-get-the-current-port-number-in-flask
def get_open_port():
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('localhost', 0))
    port = s.getsockname()[1]
    s.close()
    return port


script_master = ScriptMaster()
app = Flask(__name__)

class TheOnlyResource(Resource):
    def post(self):
        request_body = request.get_json()
        request_info = {
            'url': request.url,
            'headers': dict(request.headers),
            'data': request_body,
            'args': dict(request.args),
        }
        print(' - ' + json.dumps(request_info))

        script = script_master.current_script

        if script.after_response is not None:
            item = request_body
            for key in script.after_response.split('.'):
                item = item[key]
            Process(target=requests.request, kwargs=item).start()

        if script_master.advance():
            shutdown_server()
        return script.response, script.status_code, script.headers


def shutdown_server():
    func = request.environ.get('werkzeug.server.shutdown')
    if func is None:
        raise RuntimeError('Not running with the Werkzeug Server')
    func()


if __name__ == '__main__':
    api = Api(app)
    api.add_resource(TheOnlyResource, '/')

    arguments = parse_arguments()

    scripts = Script.from_string(arguments.scripts)
    script_master.set_scripts(scripts)

    if arguments.timeout is not None:
        signal.alarm(arguments.timeout)

    if arguments.port is not None:
        port = arguments.port
    else:
        port = get_open_port()

    print(port, file=sys.stderr)
    app.run(port=port)
